################
sphinxcontrib.dd
################

Sphinx extension for Data Dictionary and Database Diagram.

The syntax is using extended `Swagger <http://swagger.io/specification>`__
format.

Database diagram will be generated by `GraphViz <http://www.graphviz.org/>`__.

Because its dependency to GraphViz,
please remember to properly setup GraphViz extension first.


Installation
============

::

  > pip install sphinxcontrib-dd

In ``conf.py``:

::

  extensions = ['sphinxcontrib.dd']


Schema
======

- `definitions <http://swagger.io/specification/#definitionsObject>`__
- entities
- relationships


entities
--------

===========  ============================
Field Name   Description
===========  ============================
name         Table name
description  Information about the entity
===========  ============================

::

  entities:
    User:
      name: users
      description: Table to stores user information.
      columns:
        $ref: '#/definitions/User'
    Role:
      name: roles
      description: Table to stores roles.
      columns:
        $ref: '#/definitions/Role'
    UserRole:
      name: users_roles
      description: Table to stores user roles.
      columns:
        $ref: '#/definitions/UserRole'


.. note::

  Because swagger spec didn't allow unknown entry,
  it would be better if our ref able to resolve ref to another file.

  Example:

  ``$ref: 'part.yml#/definitions/User``


relationships
-------------

Determine the relationship between two entities.

=========  ===============================================
Symbol     Meaning
=========  ===============================================
\|         One
\|\|       One and only one
\|0 / 0\|  Zero or one
> / <      Many
>0 / 0<    Zero or many
>\| / \|<  One or many
=========  ===============================================

The syntax is ``<symbol>--<symbol>``.

::

  relationships:
    - User |--0< UserRole
    - Role |--0< UserRole


Usage
=====


Database Diagram
----------------

Generate database diagram using GraphViz.

.. note::

  To change the image format you should directly change GraphViz options.

  ``graphviz_output_format = 'svg'``

  I want to change this to ``database_diagram_output_format`` but for now I
  just didn't know how to do that.

::

  .. database-diagram:: data.yml

The directive have options for ``graph``, ``node`` and ``edge``.
All options name prefixed by ``graph-``, ``node-`` and ``edge-`` respectively.

.. note::

  Options will be applied to all ``graph``, ``node`` and ``edge`` without the
  prefix.

::

  .. database-diagram:: data.yml
    :graph-label: Database Diagram
    :fontname: Calibri
    :fontsize: 12

Label will be applied to graph only, font name and size will applied to all
(graph, node and edge).

::

  digraph DatabaseDiagram {
    graph [label="Database Diagram", fontname="Calibri",  fontsize=12];
    node [fontname="Calibri",  fontsize=12];
    edge [fontname="Calibri",  fontsize=12];
  }

.. warning::

  Options may behave strangely because all the value will be blindly added to
  the dot code.

Complete options is available `here <http://www.graphviz.org/content/attrs>`__.
But you may find the pdf version is easier to read,
though this html version is more comprehensive.

If you prefer the pdf version you can download it
`here <http://www.graphviz.org/pdf/dotguide.pdf>`__.
The options for node is available in appendixes A, edge in appendixes B and
graph in appendixes C.

All the options also can be set as config specified in ``conf.py`` by prefixing
the options by ``database_diagram_`` and change the ``-`` into ``_`` character.
The value in ``conf.py`` is applied to all directives but may be override by
options in each directive.

Example:

Set graph label, font name and size.

::

  .. database-diagram:: diagram_1.yml
    :graph-label: Database Diagram 1
    :graph-fontsize: 18
    :graph-fontname: Calibri

  .. database-diagram:: diagram_2.yml
    :graph-label: Database Diagram 2
    :graph-fontsize: 18
    :graph-fontname: Calibri

  .. database-diagram:: diagram_3.yml
    :graph-label: Database Diagram 3
    :graph-fontsize: 20
    :graph-fontname: Calibri

But this way will be tiring fast is you have a lot of diagram.
Time to use config value in ``conf.py``

Add the config in ``conf.py``

::

  database_diagram_graph_fontsize = 18
  database_diagram_graph_fontname = "Calibri"

In the document you only need to override diagram 3 font size.

::

  .. database-diagram:: diagram_1.yml
    :graph-label: Database Diagram 1

  .. database-diagram:: diagram_2.yml
    :graph-label: Database Diagram 2

  .. database-diagram:: diagram_3.yml
    :graph-label: Database Diagram 3
    :graph-fontsize: 20

Default options for graph:

- margin = 0
- nodesep = .5
- ranksep = 1

Default options for node:

- shape = solid
- style = rounded
- margin = 0

No default options for edge.


Data Dictionary
---------------

Generate data dictionary table:

::

  .. data-dictionary:: data.yml


TODO
====

1. Change entity name in data dictionary into h+1 depending on the context.
2. Resolve $ref to another file.
3. Change output format from ``graphviz_output_format = 'svg'`` to
  ``database_diagram_output_format = 'svg'``
